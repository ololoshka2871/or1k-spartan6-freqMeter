
MEMORY 
{
  sram  (rwx) : ORIGIN = @APP_START@, LENGTH = @APP_SIZE@
  mactx (rw)  : ORIGIN = @MAC_TX_MEM_BASE@, LENGTH = @MAC_TX_MEM_SIZE@
  macrx (rw)  : ORIGIN = @MAC_RX_MEM_BASE@, LENGTH = @MAC_RX_MEM_SIZE@
}

SECTIONS
{
  .header :
  {
      . = ALIGN(4);
      hader_start = .;
      LONG(@HEADER_W1@);
      LONG(@HEADER_W2@);
      LONG(@FLASH_TEXT_START@);             /* test_start (in flash) */
      LONG(ABSOLUTE(hader_start));          /* text_dest (Where to load) */
      LONG(_data_end - hader_start);        /* size to load */
      LONG(ABSOLUTE(_bss_start));           /* start of bss_clear */
      LONG(_bss_end - _bss_start);          /* len to clear */
      LONG(ABSOLUTE(entry));                /* address of entry point */
  } > sram

  .text :
  {
      . = ALIGN(4);
      PROVIDE(_text_start = .);
      KEEP(*(.text.entry*))
      *(.text .text.*);                     /* remaining code */
      *(.rodata);                           /* read-only data (constants) */
      *(.rodata*);
      *(.rdata*);
      . = ALIGN(4);
      _text_end = .;
  } > sram
  
  .data : 
  {   
    . = ALIGN(4);
    PROVIDE(_data_start = .);
    
    *(.got.plt) *(.got)
    *(.shdata)
    *(.data .data.* .gnu.linkonce.d.*)
    . = ALIGN(16);
    . = ALIGN (8);
    *(.ram)
    *(.eh_frame)
    . = ALIGN (8);
    PROVIDE(_edata = .);
    PROVIDE(_data_end = .);
  } > sram
   
  .bss : 
  {
    . = ALIGN(4);
    PROVIDE(_bss_start = .);
    *(.bss*)
    *(COMMON)
    . = ALIGN(4);
    PROVIDE(_bss_end = .);

    __heap_start__ = .;
    end = __heap_start__;
    _end = end;
    __end = end;
    KEEP(*(*.heap))
    __heap_end__ = .;
    __HeapLimit = __heap_end__;
  } > sram

  .mac_tx_ram (NOLOAD) :
  {
    PROVIDE(mac_tx_ram_start = .);
    . += @MAC_TX_MEM_SIZE@;
    PROVIDE(mac_tx_ram_end = .);
  } > mactx

  .mac_rx_ram (NOLOAD) :
  {
    PROVIDE(mac_rx_ram_start = .);
    . += @MAC_RX_MEM_SIZE@;
    PROVIDE(mac_rx_ram_end = .);
  } > macrx
}
