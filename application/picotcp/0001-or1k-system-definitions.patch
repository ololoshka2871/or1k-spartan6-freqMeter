From fd7549dd2633e6edae19e6c99b1fc9591532fd79 Mon Sep 17 00:00:00 2001
From: ololoshka2871 <SweetTreasure@2ch.hk>
Date: Thu, 3 Nov 2016 11:42:21 +0300
Subject: [PATCH] or1k system  definitions

---
 include/arch/pico_or1k_gcc.h | 97 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 97 insertions(+)
 create mode 100644 include/arch/pico_or1k_gcc.h

diff --git a/include/arch/pico_or1k_gcc.h b/include/arch/pico_or1k_gcc.h
new file mode 100644
index 0000000..b8fea0a
--- /dev/null
+++ b/include/arch/pico_or1k_gcc.h
@@ -0,0 +1,97 @@
+/*********************************************************************
+   PicoTCP. Copyright (c) 2012-2015 Altran Intelligent Systems. Some rights reserved.
+   See LICENSE and COPYING for usage.
+
+ *********************************************************************/
+#ifndef _INCLUDE_PICO_OR1K_GCC
+#define _INCLUDE_PICO_OR1K_GCC
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include "pico_constants.h"
+
+#include "heap.h"
+
+/* monotonically increasing tick,
+ * typically incremented every millisecond in a systick interrupt */
+extern volatile unsigned int pico_ms_tick;
+
+#define dbg(...)
+
+#ifdef PICO_SUPPORT_PTHREAD
+    #define PICO_SUPPORT_MUTEX
+#endif
+
+#ifdef PICO_SUPPORT_RTOS
+    #define PICO_SUPPORT_MUTEX
+
+extern void *pico_mutex_init(void);
+extern void pico_mutex_lock(void*);
+extern void pico_mutex_unlock(void*);
+extern void *pvPortMalloc( size_t xSize );
+extern void vPortFree( void *pv );
+
+    #define pico_free(x) vPortFree(x)
+    #define free(x)      vPortFree(x)
+
+static inline void *pico_zalloc(size_t size)
+{
+    void *ptr = pvPortMalloc(size);
+
+    if(ptr)
+        memset(ptr, 0u, size);
+
+    return ptr;
+}
+
+static inline pico_time PICO_TIME_MS()
+{
+    return pico_ms_tick;
+}
+
+static inline pico_time PICO_TIME()
+{
+    return pico_ms_tick / 1000;
+}
+
+static inline void PICO_IDLE(void)
+{
+    pico_time now = PICO_TIME_MS();
+    while(now == PICO_TIME_MS()) ;
+}
+
+#else /* NO RTOS SUPPORT */
+
+    #ifdef MEM_MEAS
+        #define pico_free(x)    free_sys(x)
+        #define pico_zalloc(x)  zalloc_sys(x)
+    #else
+/* Use plain C-lib malloc and free */
+        #define pico_free(x) free(x)
+static inline void *pico_zalloc(size_t size)
+{
+    void *ptr = malloc(size);
+    if(ptr)
+        memset(ptr, 0u, size);
+
+    return ptr;
+}
+    #endif
+
+static inline pico_time PICO_TIME_MS(void)
+{
+    return (pico_time)pico_ms_tick;
+}
+
+static inline pico_time PICO_TIME(void)
+{
+    return (pico_time)(PICO_TIME_MS() / 1000);
+}
+
+inline void PICO_IDLE(void);
+
+#endif /* IFNDEF RTOS */
+
+#endif  /* _INCLUDE_PICO_OR1K_GCC */
+
-- 
1.9.1

